// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerformanceDataExtractor.Data;

#nullable disable

namespace PerformanceDataExtractor.Migrations
{
    [DbContext(typeof(PerformanceDbContext))]
    [Migration("20250831113646_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerformanceDataExtractor.Models.PerformanceTestRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageResponseTime")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("ErrorRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<string>("LoadProfile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Throughput")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<int>("TotalRequests")
                        .HasColumnType("int");

                    b.Property<int>("VirtualUsers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("StartTime");

                    b.HasIndex("TestName");

                    b.ToTable("PerformanceTestRuns");
                });

            modelBuilder.Entity("PerformanceDataExtractor.Models.RequestMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvgResponseTime")
                        .HasColumnType("int");

                    b.Property<double>("ErrorPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MaxResponseTime")
                        .HasColumnType("int");

                    b.Property<int>("MinResponseTime")
                        .HasColumnType("int");

                    b.Property<int>("NinetiethPercentile")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceTestRunId")
                        .HasColumnType("int");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("RequestsPerSecond")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<int>("TotalRequests")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AvgResponseTime");

                    b.HasIndex("HttpMethod");

                    b.HasIndex("PerformanceTestRunId");

                    b.HasIndex("RequestName");

                    b.ToTable("RequestMetrics");
                });

            modelBuilder.Entity("PerformanceDataExtractor.Models.RequestMetric", b =>
                {
                    b.HasOne("PerformanceDataExtractor.Models.PerformanceTestRun", "PerformanceTestRun")
                        .WithMany("RequestMetrics")
                        .HasForeignKey("PerformanceTestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformanceTestRun");
                });

            modelBuilder.Entity("PerformanceDataExtractor.Models.PerformanceTestRun", b =>
                {
                    b.Navigation("RequestMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
